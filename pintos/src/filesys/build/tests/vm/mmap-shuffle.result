FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:436 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0xc0107756 0xc01051ce 0xc0104bc3 0xc010e633 0xc010d264 0xc010da9a 0xc010c9d7 0xc010b27c 0xc0101935 0xc0101b0b 0x804813a 0x804891f 0x804894c
Translation of call stack:
In kernel.o:
0xc0107756: debug_panic (.../../lib/kernel/debug.c:34)
0xc01051ce: select_sector (.../../../devices/disk.c:437)
0xc0104bc3: disk_read (.../../../devices/disk.c:230)
0xc010e633: cache_read (...../../filesys/cache.c:138)
0xc010d264: byte_to_sector (...../../filesys/inode.c:100)
0xc010da9a: inode_read_at (...../../filesys/inode.c:422)
0xc010c9d7: file_read_at (...d/../../filesys/file.c:88)
0xc010b27c: page_fault (.../userprog/exception.c:235)
0xc0101935: intr_handler (..../threads/interrupt.c:361)
0xc0101b0b: intr_entry (threads/intr-stubs.S:38)
In tests/vm/mmap-shuffle:
0x0804813a: test_main (...ests/vm/mmap-shuffle.c:29)
0x0804891f: main (...ild/../../tests/main.c:13)
0x0804894c: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
