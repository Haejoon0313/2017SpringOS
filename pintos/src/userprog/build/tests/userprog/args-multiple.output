Copying tests/userprog/args-multiple into /tmp/LRRgllKSqa.dsk...
Writing command line to /tmp/rdLQ6PTZMU.dsk...
qemu -hda /tmp/rdLQ6PTZMU.dsk -hdb /tmp/KT5L1Zvkbl.dsk -hdc /tmp/LRRgllKSqa.dsk -m 4 -net none -nographic -monitor null
Kernel command line: -q -f put args-multiple run 'args-multiple some arguments for you!'
Pintos booting with 4,096 kB RAM...
374 pages available in kernel pool.
374 pages available in user pool.
Calibrating timer...  78,540,800 loops/s.
hd0:0: detected 137 sector (68 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 4,032 sector (1 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 72 sector (36 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'args-multiple' into the file system...
Executing 'args-multiple some arguments for you!':
file name that passed to load() : args-multiple some arguments for you! 
file name that passed to setup_stack : args-multiple some arguments for you! 
setup_stack function is now start! 
argc count : 5 
file name is : args-multiple some arguments for you! 
argv[0] value is bffffff2 
command token string check : args-multiple 
argv[1] value is bfffffed 
command token string check : some 
argv[2] value is bfffffe3 
command token string check : arguments 
argv[3] value is bfffffdf 
command token string check : for 
argv[4] value is bfffffda 
command token string check : you! 
i count ! : 5 
word aligned : 0 
null pointer : c011be8c
argv[4] address : bfffffda
argv[3] address : bfffffdf
argv[2] address : bfffffe3
argv[1] address : bfffffed
argv[0] address : bffffff2
argv address : c011be88
bfffff30                          00 00 00 00 00 00 00 00 |        ........|
bfffff40  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffff50  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffff60  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffff70  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffff80  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffff90  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffffa0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 |................|
bfffffb0  00 00 00 00 00 00 00 00-05 00 00 00 c0 ff ff bf |................|
bfffffc0  f2 ff ff bf ed ff ff bf-e3 ff ff bf df ff ff bf |................|
bfffffd0  da ff ff bf 00 00 00 00-00 00 79 6f 75 21 00 66 |..........you!.f|
bfffffe0  6f 72 00 61 72 67 75 6d-65 6e 74 73 00 73 6f 6d |or.arguments.som|
bffffff0  65 00 61 72 67 73 2d 6d-75 6c 74 69 70 6c 65 00 |e.args-multiple.|
c0000000  53 ff 00 f0 53 ff 00 f0-c3 e2                   |S...S.....      |
setup stack function is end~! 
syscall number : 9
Page fault at 0x1: not present error reading page in kernel context.
Interrupt 0x0e (#PF Page-Fault Exception) at eip=0xc0105b89
 cr2=00000001 error=00000000
 eax=00000001 ebx=00000001 ecx=00000780 edx=c011b000
 esi=bfffff08 edi=0804ba8e esp=c011b000 ebp=c011bf24
 cs=0008 ds=0010 es=0010 ss=1b08
Kernel PANIC at ../../userprog/exception.c:100 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0xc0107676 0xc010acef 0xc010ada9 0xc0101855 0xc0101a2b 0xc0105b89 0xc010961e 0xc0105b7b 0xc010ae42 0xc0101855 0xc0101a2b 0x804a0a9 0x8048214 0x8048245 0x80480cb 0x80486f8.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 79 ticks
Thread: 30 idle ticks, 41 kernel ticks, 8 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 59 reads, 152 writes
hd1:0: 72 reads, 0 writes
Console: 3434 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
